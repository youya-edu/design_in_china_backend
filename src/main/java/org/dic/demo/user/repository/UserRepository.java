package org.dic.demo.user.repository;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;
import java.util.List;
import java.util.function.Supplier;
import java.util.stream.Collectors;
import lombok.AllArgsConstructor;
import org.dic.demo.common.PaginationParam;
import org.dic.demo.user.database.DatabaseUser;
import org.dic.demo.user.database.DatabaseUserRole;
import org.dic.demo.user.database.UserDao;
import org.dic.demo.user.model.User;
import org.dic.demo.user.model.UserCollection;
import org.dic.demo.user.model.UserKeyInfo;
import org.dic.demo.user.servicestub.UserServiceStub;
import org.dic.demo.util.media.MediaType;
import org.dic.demo.util.media.MediaUtils;
import org.dic.demo.util.web.WebHelper;
import org.springframework.stereotype.Component;

@Component
@AllArgsConstructor
public class UserRepository {

  private final UserDao userDao;
  private final WebHelper webHelper;

  /**
   * Gets user by id.
   *
   * @param userId the user id
   * @return the user selected by id, or null if no such user
   */
  public User getUserById(long userId) {
    DatabaseUser databaseUser = userDao.getUserById(userId);
    if (databaseUser == null) {
      return null;
    }
    return databaseUser.toDomainObject();
  }

  /**
   * Gets user by username.
   *
   * @param username the username
   * @return the user selected by username, or null if no such user
   */
  public User getUserByUsername(String username) {
    DatabaseUser databaseUser = userDao.getUserByUsername(username);
    if (databaseUser == null) {
      return null;
    }
    return databaseUser.toDomainObject();
  }

  /**
   * Gets user by email.
   *
   * @param email the email
   * @return the user selected by email, or null if no such user
   */
  public User getUserByEmail(String email) {
    DatabaseUser databaseUser = userDao.getUserByEmail(email);
    if (databaseUser == null) {
      return null;
    }
    return databaseUser.toDomainObject();
  }

  /**
   * Gets all users, including roles of [ADMIN, DESIGNER, USER].
   *
   * @return all users in database, or null if there is no user.
   */
  public UserCollection getAllUsers(PaginationParam paginationParam) {
    PageHelper.startPage(paginationParam.getPage(), paginationParam.getPageSize());
    return getUsers(userDao::getAllUsers);
  }

  /**
   * Gets all designers.
   *
   * @return all designers in database, or null if there is no designer.
   */
  public UserCollection getDesigners(PaginationParam paginationParam) {
    PageHelper.startPage(paginationParam.getPage(), paginationParam.getPageSize());
    return getUsers(userDao::getDesigners);
  }

  private UserCollection getUsers(Supplier<List<DatabaseUser>> supplier) {
    List<DatabaseUser> designers = supplier.get();
    return new UserCollection(
        designers.stream().map(DatabaseUser::toDomainObject).collect(Collectors.toList()),
        ((Page) designers).getTotal());
  }

  /**
   * Create an user.
   *
   * @param userKeyInfo the user key info, including email & username & password
   * @return the user created, with a id auto-generated by database
   */
  public User createUser(UserKeyInfo userKeyInfo) {
    User user = User.builder().userKeyInfo(userKeyInfo).build();
    user.setNickname(user.getUsername());
    // set default avatar
    String avatarPath = MediaUtils.getDefaultFile(MediaType.AVATAR);
    String avatarUrl = webHelper.getOrigin() + avatarPath;
    user.setAvatar(avatarUrl);
    DatabaseUser dataBaseUser = user.toDatabaseObject();
    userDao.createUser(dataBaseUser);
    userDao.createUserRoles(
        user.getRoles().stream()
            .map(userRole -> new DatabaseUserRole(dataBaseUser.getId(), userRole.getId()))
            .collect(Collectors.toList()));
    return user.toBuilder().id(dataBaseUser.getId()).build();
  }

  public void updateUser(User user) {
    userDao.updateUser(user.toDatabaseObject());
  }

  public void deleteUser(long userId) {
    UserServiceStub.deleteUser(userId);
  }
}
